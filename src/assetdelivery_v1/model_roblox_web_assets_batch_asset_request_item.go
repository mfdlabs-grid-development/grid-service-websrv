/*
Asset Delivery Api v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assetdeliveryv1

import (
	"encoding/json"

	httpclients "github.com/mfdlabs/grid-service-websrv/http_clients"
)

// checks if the RobloxWebAssetsBatchAssetRequestItem type satisfies the MappedNullable interface at compile time
var _ httpclients.MappedNullable = &RobloxWebAssetsBatchAssetRequestItem{}

// RobloxWebAssetsBatchAssetRequestItem struct for RobloxWebAssetsBatchAssetRequestItem
type RobloxWebAssetsBatchAssetRequestItem struct {
	AssetName *string `json:"assetName,omitempty"`
	AssetType *string `json:"assetType,omitempty"`
	ClientInsert *bool `json:"clientInsert,omitempty"`
	PlaceId *int64 `json:"placeId,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
	ScriptInsert *bool `json:"scriptInsert,omitempty"`
	ServerPlaceId *int64 `json:"serverPlaceId,omitempty"`
	UniverseId *int64 `json:"universeId,omitempty"`
	Accept *string `json:"accept,omitempty"`
	Encoding *string `json:"encoding,omitempty"`
	Hash *string `json:"hash,omitempty"`
	UserAssetId *int64 `json:"userAssetId,omitempty"`
	AssetId *int64 `json:"assetId,omitempty"`
	Version *int32 `json:"version,omitempty"`
	AssetVersionId *int64 `json:"assetVersionId,omitempty"`
	ModulePlaceId *int64 `json:"modulePlaceId,omitempty"`
	AssetFormat *string `json:"assetFormat,omitempty"`
	RobloxAssetFormat *string `json:"roblox-assetFormat,omitempty"`
}

// NewRobloxWebAssetsBatchAssetRequestItem instantiates a new RobloxWebAssetsBatchAssetRequestItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRobloxWebAssetsBatchAssetRequestItem() *RobloxWebAssetsBatchAssetRequestItem {
	this := RobloxWebAssetsBatchAssetRequestItem{}
	return &this
}

// NewRobloxWebAssetsBatchAssetRequestItemWithDefaults instantiates a new RobloxWebAssetsBatchAssetRequestItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRobloxWebAssetsBatchAssetRequestItemWithDefaults() *RobloxWebAssetsBatchAssetRequestItem {
	this := RobloxWebAssetsBatchAssetRequestItem{}
	return &this
}

// GetAssetName returns the AssetName field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetName() string {
	if o == nil || httpclients.IsNil(o.AssetName) {
		var ret string
		return ret
	}
	return *o.AssetName
}

// GetAssetNameOk returns a tuple with the AssetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetNameOk() (*string, bool) {
	if o == nil || httpclients.IsNil(o.AssetName) {
		return nil, false
	}
	return o.AssetName, true
}

// HasAssetName returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasAssetName() bool {
	if o != nil && !httpclients.IsNil(o.AssetName) {
		return true
	}

	return false
}

// SetAssetName gets a reference to the given string and assigns it to the AssetName field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetAssetName(v string) {
	o.AssetName = &v
}

// GetAssetType returns the AssetType field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetType() string {
	if o == nil || httpclients.IsNil(o.AssetType) {
		var ret string
		return ret
	}
	return *o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetTypeOk() (*string, bool) {
	if o == nil || httpclients.IsNil(o.AssetType) {
		return nil, false
	}
	return o.AssetType, true
}

// HasAssetType returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasAssetType() bool {
	if o != nil && !httpclients.IsNil(o.AssetType) {
		return true
	}

	return false
}

// SetAssetType gets a reference to the given string and assigns it to the AssetType field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetAssetType(v string) {
	o.AssetType = &v
}

// GetClientInsert returns the ClientInsert field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetClientInsert() bool {
	if o == nil || httpclients.IsNil(o.ClientInsert) {
		var ret bool
		return ret
	}
	return *o.ClientInsert
}

// GetClientInsertOk returns a tuple with the ClientInsert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetClientInsertOk() (*bool, bool) {
	if o == nil || httpclients.IsNil(o.ClientInsert) {
		return nil, false
	}
	return o.ClientInsert, true
}

// HasClientInsert returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasClientInsert() bool {
	if o != nil && !httpclients.IsNil(o.ClientInsert) {
		return true
	}

	return false
}

// SetClientInsert gets a reference to the given bool and assigns it to the ClientInsert field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetClientInsert(v bool) {
	o.ClientInsert = &v
}

// GetPlaceId returns the PlaceId field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetPlaceId() int64 {
	if o == nil || httpclients.IsNil(o.PlaceId) {
		var ret int64
		return ret
	}
	return *o.PlaceId
}

// GetPlaceIdOk returns a tuple with the PlaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetPlaceIdOk() (*int64, bool) {
	if o == nil || httpclients.IsNil(o.PlaceId) {
		return nil, false
	}
	return o.PlaceId, true
}

// HasPlaceId returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasPlaceId() bool {
	if o != nil && !httpclients.IsNil(o.PlaceId) {
		return true
	}

	return false
}

// SetPlaceId gets a reference to the given int64 and assigns it to the PlaceId field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetPlaceId(v int64) {
	o.PlaceId = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetRequestId() string {
	if o == nil || httpclients.IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetRequestIdOk() (*string, bool) {
	if o == nil || httpclients.IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasRequestId() bool {
	if o != nil && !httpclients.IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetRequestId(v string) {
	o.RequestId = &v
}

// GetScriptInsert returns the ScriptInsert field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetScriptInsert() bool {
	if o == nil || httpclients.IsNil(o.ScriptInsert) {
		var ret bool
		return ret
	}
	return *o.ScriptInsert
}

// GetScriptInsertOk returns a tuple with the ScriptInsert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetScriptInsertOk() (*bool, bool) {
	if o == nil || httpclients.IsNil(o.ScriptInsert) {
		return nil, false
	}
	return o.ScriptInsert, true
}

// HasScriptInsert returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasScriptInsert() bool {
	if o != nil && !httpclients.IsNil(o.ScriptInsert) {
		return true
	}

	return false
}

// SetScriptInsert gets a reference to the given bool and assigns it to the ScriptInsert field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetScriptInsert(v bool) {
	o.ScriptInsert = &v
}

// GetServerPlaceId returns the ServerPlaceId field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetServerPlaceId() int64 {
	if o == nil || httpclients.IsNil(o.ServerPlaceId) {
		var ret int64
		return ret
	}
	return *o.ServerPlaceId
}

// GetServerPlaceIdOk returns a tuple with the ServerPlaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetServerPlaceIdOk() (*int64, bool) {
	if o == nil || httpclients.IsNil(o.ServerPlaceId) {
		return nil, false
	}
	return o.ServerPlaceId, true
}

// HasServerPlaceId returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasServerPlaceId() bool {
	if o != nil && !httpclients.IsNil(o.ServerPlaceId) {
		return true
	}

	return false
}

// SetServerPlaceId gets a reference to the given int64 and assigns it to the ServerPlaceId field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetServerPlaceId(v int64) {
	o.ServerPlaceId = &v
}

// GetUniverseId returns the UniverseId field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetUniverseId() int64 {
	if o == nil || httpclients.IsNil(o.UniverseId) {
		var ret int64
		return ret
	}
	return *o.UniverseId
}

// GetUniverseIdOk returns a tuple with the UniverseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetUniverseIdOk() (*int64, bool) {
	if o == nil || httpclients.IsNil(o.UniverseId) {
		return nil, false
	}
	return o.UniverseId, true
}

// HasUniverseId returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasUniverseId() bool {
	if o != nil && !httpclients.IsNil(o.UniverseId) {
		return true
	}

	return false
}

// SetUniverseId gets a reference to the given int64 and assigns it to the UniverseId field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetUniverseId(v int64) {
	o.UniverseId = &v
}

// GetAccept returns the Accept field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAccept() string {
	if o == nil || httpclients.IsNil(o.Accept) {
		var ret string
		return ret
	}
	return *o.Accept
}

// GetAcceptOk returns a tuple with the Accept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAcceptOk() (*string, bool) {
	if o == nil || httpclients.IsNil(o.Accept) {
		return nil, false
	}
	return o.Accept, true
}

// HasAccept returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasAccept() bool {
	if o != nil && !httpclients.IsNil(o.Accept) {
		return true
	}

	return false
}

// SetAccept gets a reference to the given string and assigns it to the Accept field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetAccept(v string) {
	o.Accept = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetEncoding() string {
	if o == nil || httpclients.IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetEncodingOk() (*string, bool) {
	if o == nil || httpclients.IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasEncoding() bool {
	if o != nil && !httpclients.IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetEncoding(v string) {
	o.Encoding = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetHash() string {
	if o == nil || httpclients.IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetHashOk() (*string, bool) {
	if o == nil || httpclients.IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasHash() bool {
	if o != nil && !httpclients.IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetHash(v string) {
	o.Hash = &v
}

// GetUserAssetId returns the UserAssetId field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetUserAssetId() int64 {
	if o == nil || httpclients.IsNil(o.UserAssetId) {
		var ret int64
		return ret
	}
	return *o.UserAssetId
}

// GetUserAssetIdOk returns a tuple with the UserAssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetUserAssetIdOk() (*int64, bool) {
	if o == nil || httpclients.IsNil(o.UserAssetId) {
		return nil, false
	}
	return o.UserAssetId, true
}

// HasUserAssetId returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasUserAssetId() bool {
	if o != nil && !httpclients.IsNil(o.UserAssetId) {
		return true
	}

	return false
}

// SetUserAssetId gets a reference to the given int64 and assigns it to the UserAssetId field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetUserAssetId(v int64) {
	o.UserAssetId = &v
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetId() int64 {
	if o == nil || httpclients.IsNil(o.AssetId) {
		var ret int64
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetIdOk() (*int64, bool) {
	if o == nil || httpclients.IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasAssetId() bool {
	if o != nil && !httpclients.IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given int64 and assigns it to the AssetId field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetAssetId(v int64) {
	o.AssetId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetVersion() int32 {
	if o == nil || httpclients.IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetVersionOk() (*int32, bool) {
	if o == nil || httpclients.IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasVersion() bool {
	if o != nil && !httpclients.IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetVersion(v int32) {
	o.Version = &v
}

// GetAssetVersionId returns the AssetVersionId field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetVersionId() int64 {
	if o == nil || httpclients.IsNil(o.AssetVersionId) {
		var ret int64
		return ret
	}
	return *o.AssetVersionId
}

// GetAssetVersionIdOk returns a tuple with the AssetVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetVersionIdOk() (*int64, bool) {
	if o == nil || httpclients.IsNil(o.AssetVersionId) {
		return nil, false
	}
	return o.AssetVersionId, true
}

// HasAssetVersionId returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasAssetVersionId() bool {
	if o != nil && !httpclients.IsNil(o.AssetVersionId) {
		return true
	}

	return false
}

// SetAssetVersionId gets a reference to the given int64 and assigns it to the AssetVersionId field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetAssetVersionId(v int64) {
	o.AssetVersionId = &v
}

// GetModulePlaceId returns the ModulePlaceId field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetModulePlaceId() int64 {
	if o == nil || httpclients.IsNil(o.ModulePlaceId) {
		var ret int64
		return ret
	}
	return *o.ModulePlaceId
}

// GetModulePlaceIdOk returns a tuple with the ModulePlaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetModulePlaceIdOk() (*int64, bool) {
	if o == nil || httpclients.IsNil(o.ModulePlaceId) {
		return nil, false
	}
	return o.ModulePlaceId, true
}

// HasModulePlaceId returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasModulePlaceId() bool {
	if o != nil && !httpclients.IsNil(o.ModulePlaceId) {
		return true
	}

	return false
}

// SetModulePlaceId gets a reference to the given int64 and assigns it to the ModulePlaceId field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetModulePlaceId(v int64) {
	o.ModulePlaceId = &v
}

// GetAssetFormat returns the AssetFormat field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetFormat() string {
	if o == nil || httpclients.IsNil(o.AssetFormat) {
		var ret string
		return ret
	}
	return *o.AssetFormat
}

// GetAssetFormatOk returns a tuple with the AssetFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetAssetFormatOk() (*string, bool) {
	if o == nil || httpclients.IsNil(o.AssetFormat) {
		return nil, false
	}
	return o.AssetFormat, true
}

// HasAssetFormat returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasAssetFormat() bool {
	if o != nil && !httpclients.IsNil(o.AssetFormat) {
		return true
	}

	return false
}

// SetAssetFormat gets a reference to the given string and assigns it to the AssetFormat field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetAssetFormat(v string) {
	o.AssetFormat = &v
}

// GetRobloxAssetFormat returns the RobloxAssetFormat field value if set, zero value otherwise.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetRobloxAssetFormat() string {
	if o == nil || httpclients.IsNil(o.RobloxAssetFormat) {
		var ret string
		return ret
	}
	return *o.RobloxAssetFormat
}

// GetRobloxAssetFormatOk returns a tuple with the RobloxAssetFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) GetRobloxAssetFormatOk() (*string, bool) {
	if o == nil || httpclients.IsNil(o.RobloxAssetFormat) {
		return nil, false
	}
	return o.RobloxAssetFormat, true
}

// HasRobloxAssetFormat returns a boolean if a field has been set.
func (o *RobloxWebAssetsBatchAssetRequestItem) HasRobloxAssetFormat() bool {
	if o != nil && !httpclients.IsNil(o.RobloxAssetFormat) {
		return true
	}

	return false
}

// SetRobloxAssetFormat gets a reference to the given string and assigns it to the RobloxAssetFormat field.
func (o *RobloxWebAssetsBatchAssetRequestItem) SetRobloxAssetFormat(v string) {
	o.RobloxAssetFormat = &v
}

func (o RobloxWebAssetsBatchAssetRequestItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RobloxWebAssetsBatchAssetRequestItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !httpclients.IsNil(o.AssetName) {
		toSerialize["assetName"] = o.AssetName
	}
	if !httpclients.IsNil(o.AssetType) {
		toSerialize["assetType"] = o.AssetType
	}
	if !httpclients.IsNil(o.ClientInsert) {
		toSerialize["clientInsert"] = o.ClientInsert
	}
	if !httpclients.IsNil(o.PlaceId) {
		toSerialize["placeId"] = o.PlaceId
	}
	if !httpclients.IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !httpclients.IsNil(o.ScriptInsert) {
		toSerialize["scriptInsert"] = o.ScriptInsert
	}
	if !httpclients.IsNil(o.ServerPlaceId) {
		toSerialize["serverPlaceId"] = o.ServerPlaceId
	}
	if !httpclients.IsNil(o.UniverseId) {
		toSerialize["universeId"] = o.UniverseId
	}
	if !httpclients.IsNil(o.Accept) {
		toSerialize["accept"] = o.Accept
	}
	if !httpclients.IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !httpclients.IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !httpclients.IsNil(o.UserAssetId) {
		toSerialize["userAssetId"] = o.UserAssetId
	}
	if !httpclients.IsNil(o.AssetId) {
		toSerialize["assetId"] = o.AssetId
	}
	if !httpclients.IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !httpclients.IsNil(o.AssetVersionId) {
		toSerialize["assetVersionId"] = o.AssetVersionId
	}
	if !httpclients.IsNil(o.ModulePlaceId) {
		toSerialize["modulePlaceId"] = o.ModulePlaceId
	}
	if !httpclients.IsNil(o.AssetFormat) {
		toSerialize["assetFormat"] = o.AssetFormat
	}
	if !httpclients.IsNil(o.RobloxAssetFormat) {
		toSerialize["roblox-assetFormat"] = o.RobloxAssetFormat
	}
	return toSerialize, nil
}

type NullableRobloxWebAssetsBatchAssetRequestItem struct {
	value *RobloxWebAssetsBatchAssetRequestItem
	isSet bool
}

func (v NullableRobloxWebAssetsBatchAssetRequestItem) Get() *RobloxWebAssetsBatchAssetRequestItem {
	return v.value
}

func (v *NullableRobloxWebAssetsBatchAssetRequestItem) Set(val *RobloxWebAssetsBatchAssetRequestItem) {
	v.value = val
	v.isSet = true
}

func (v NullableRobloxWebAssetsBatchAssetRequestItem) IsSet() bool {
	return v.isSet
}

func (v *NullableRobloxWebAssetsBatchAssetRequestItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRobloxWebAssetsBatchAssetRequestItem(val *RobloxWebAssetsBatchAssetRequestItem) *NullableRobloxWebAssetsBatchAssetRequestItem {
	return &NullableRobloxWebAssetsBatchAssetRequestItem{value: val, isSet: true}
}

func (v NullableRobloxWebAssetsBatchAssetRequestItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRobloxWebAssetsBatchAssetRequestItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


