/*
Avatar Api v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avatarv1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AvatarApiService AvatarApi service
type AvatarApiService service

type ApiV1AvatarFetchGetRequest struct {
	ctx context.Context
	ApiService *AvatarApiService
	placeId *int64
	userId *int64
}

func (r ApiV1AvatarFetchGetRequest) PlaceId(placeId int64) ApiV1AvatarFetchGetRequest {
	r.placeId = &placeId
	return r
}

func (r ApiV1AvatarFetchGetRequest) UserId(userId int64) ApiV1AvatarFetchGetRequest {
	r.userId = &userId
	return r
}

func (r ApiV1AvatarFetchGetRequest) Execute() (*RobloxApiAvatarModelsAvatarFetchModel, *http.Response, error) {
	return r.ApiService.V1AvatarFetchGetExecute(r)
}

/*
V1AvatarFetchGet This endpoint returns a bunch of data used by client to create the avatar in game.    It's a replacement for Avatar-fetch v1.1  The difference from AvatarFetch is that we take the avatar's scaling (not the universe's) and we return  a collection of asset type and asset ids instead of asset version ids

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1AvatarFetchGetRequest
*/
func (a *AvatarApiService) V1AvatarFetchGet(ctx context.Context) ApiV1AvatarFetchGetRequest {
	return ApiV1AvatarFetchGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RobloxApiAvatarModelsAvatarFetchModel
func (a *AvatarApiService) V1AvatarFetchGetExecute(r ApiV1AvatarFetchGetRequest) (*RobloxApiAvatarModelsAvatarFetchModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RobloxApiAvatarModelsAvatarFetchModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvatarApiService.V1AvatarFetchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/avatar-fetch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.placeId == nil {
		return localVarReturnValue, nil, reportError("placeId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "placeId", r.placeId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
